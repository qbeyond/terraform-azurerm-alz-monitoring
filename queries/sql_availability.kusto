AzureMetrics
| where ResourceProvider == "MICROSOFT.SQL" // /DATABASES
| where MetricName == "availability"
| where TimeGenerated >= ago(15min)
| summarize arg_max(TimeGenerated, value=Total, affected_entity=Resource) by _ResourceId
| join kind=inner (
    // Join with Monitoring Resources to get ResourceId
    MonitoringResources_CL
    | where type_s in~ ("microsoft.Sql/servers/databases")
    | distinct tags_managedby_s, tags_alerting_s, _ResourceId = tolower(id_s)
) on _ResourceId
| where tags_managedby_s =~ "q.beyond"
| where tags_alerting_s =~ "enabled" or isempty(tags_alerting_s)
| extend state = iff(value != 100, "CRITICAL", "OK")
|Â where state != "OK" or datetime_part("Minute", now()) <= 5   // Only send OK events between HH:00 and HH:05
| extend affected_object = extract("(^.*/servers/[^/]+)", 1, _ResourceId)
| extend additional_information = strcat(
  state,
  ": The database ",
  affected_entity,
  " on the server ",
  split(affected_object, "/")[array_length(split(affected_object, "/")) - 1],
  iff(state == "OK", " is available.", " is not available. "),
  "Managed by: ",
  tags_managedby_s
)
| extend monitor_package = "AZ_BS_ManagedMSSQL"
| extend monitor_name = "AZ_AZURESERVICE_MSSQL_SC"
| extend monitor_description = "Checks the availability of Azure MSSQL DBs"
| extend script_name = "n/a"
| extend script_version = "n/a"
| extend threshold = "100"
| extend _ResourceId = affected_object
| project _ResourceId, RawData = strcat("TimeGenerated:", now(), ";_ResourceId:", _ResourceId, ";state:", state, ";affected_object:", affected_object, ";monitor_package:", monitor_package, ";monitor_name:", monitor_name, ";monitor_description:", monitor_description, ";script_name:", script_name, ";script_version:", script_version, ";threshold:", threshold, ";value:", value, ";affected_entity:", affected_entity, ";additional_information:", additional_information)